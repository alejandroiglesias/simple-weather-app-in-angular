{"version":3,"sources":["scripts/app.js"],"names":["_classCallCheck","instance","Constructor","TypeError","routesConfig","$stateProvider","$urlRouterProvider","$locationProvider","otherwise","state","url","component","angular","module","constant","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","weatherService","$http","openWeatherMapAppId","this","_$http","requestParams","params","APPID","units","value","city","merge","q","jsonp","then","response","data","service","WeatherController","_weatherService","cities","date","Date","now","_this","text","_getWeather","getWeather","controller","templateUrl","run","$templateCache","put","config"],"mappings":"AAAA,YAOA,SAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAyChH,QAAIH,iBAAeC,EAAcC,GAAS,KAAAD,YAAkCC,IAAgB,KAAI,IAAMC,WAAQ,qCA+E9G,QAAQC,cAAcC,EAAOC,EAAAC,GAK3BD,EAAmBE,UAAU,YAE7BH,EAAeI,MAAM,OAFrBC,IAAA,WAIEC,UAAW,6FAtIfC,QAAQC,OAAO,cAAeC,SAAS,sBAAuB,mCAG9D,IAAIC,cAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUnB,EAAa0B,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBd,EAAY4B,UAAWF,GAAiBC,GAAab,EAAiBd,EAAa2B,GAAqB3B,MAI5hB6B,eAAiB,WAGnB,QAASA,GAAeC,EAAOC,GAC7BjC,gBAAgBkC,KAAMH,GAAtBG,KAAAC,OAAAH,EAEAE,KAAKE,eAGHC,QADFC,MAAKL,EACHM,MAAQ,WAwBZ,iDAVAxB,aAAagB,IACXJ,IAAK,aADPa,MAAA,SAA6BC,GAC3B,GAAKJ,GAAAzB,QAAA8B,OAAAL,QAAAM,EAAAF,IAAAP,KAAAE,cACL,OAAOF,MAAAC,OAASS,MAAW,wEAAMP,GAAAQ,KAAA,SAAAC,GAC/B,MAAIA,GAASC,WAOVhB,IAGTnB,SAAQC,OAAO,WAAWmC,QAAQ,iBAAkBjB,eACpD,IAAAhB,cAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAC,GAAA,EAAAA,EAAAD,EAAAE,OAAAD,IAAA,CAAA,GAAAE,GAAAH,EAAAC,EAAAE,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAAC,OAAAC,eAAAT,EAAAI,EAAAM,IAAAN,IAAA,MAAA,UAAAnB,EAAA0B,EAAAC,GAAA,MAAAD,IAAAZ,EAAAd,EAAA4B,UAAAF,GAAAC,GAAAb,EAAAd,EAAA2B,GAAA3B,MAIA+C,kBAAS,WAKP,QAASA,GAAkBjB,EAAOD,GAChC/B,gBAAgBkC,KAAMe,GADxBf,KAAAC,OAASH,EACPE,KAAAgB,gBAAsBnB,EAEtBG,KAAKiB,UACLjB,KAAKkB,KAAAC,KAAAC,MAsDP,4CA1CAvC,aAAakC,IACXtB,IAAK,UACLa,MAAO,SAAiBC,GAF1B,GAAAc,GAAarB,IAGLA,MAAAiB,OAAQV,EAAAe,OAGZtB,KAAIuB,YAAYhB,GAAKI,KAAO,SAAAE,GAC1BQ,EAAAJ,OAAAV,EAAAe,MAAAT,OAcJpB,IAAK,cACLa,MAAO,SAAqBC,GAF3B,MAAAP,MAAAgB,gBAAAQ,WAAAjB,EAAAe,SAYD7B,IAAK,aACLa,MAAO,SAAoBC,GADtBP,KAAAiB,OAAAV,EAAAe,aAGEtB,MAAKiB,OAAOV,EAAKe,UAOnBP,IAITrC,SAAQC,OAAO,WAAWF,UAAU,WAFpCgD,WAAAV,kBAIEW,YAAa,uCAIfhD,QAAQC,OAAO,OAAQ,gBAAiB,YAAa,cAAe,YAAa,YAFjFD,QAAAC,OAAA,OAAAgD,KAAA,iBAAA,SAAAC,GAAAA,EAAAC,IAAA,qCAAA,ulCAGAnD,QAAQC,OAAO,OAAOmD,OAAK5D","file":"scripts/app-1f9c7ecdd1.js","sourcesContent":["'use strict';\n\nangular.module('weather', []).constant('openWeatherMapAppId', 'ed0cf75d34cbe0236f9e94985a91fea2');\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar weatherService = function () {\n\n  /** @ngInject */\n  function weatherService($http, openWeatherMapAppId) {\n    _classCallCheck(this, weatherService);\n\n    this._$http = $http;\n\n    this.requestParams = {\n      params: {\n        APPID: openWeatherMapAppId,\n        units: 'metric'\n      }\n    };\n  }\n\n  /**\n   * Gets weather for a given city and returns a promise.\n   * @param city\n   * @returns {HttpPromise}\n   */\n\n\n  _createClass(weatherService, [{\n    key: 'getWeather',\n    value: function getWeather(city) {\n      var params = angular.merge({ params: { q: city } }, this.requestParams);\n      return this._$http.jsonp('http://api.openweathermap.org/data/2.5/weather?callback=JSON_CALLBACK', params).then(function (response) {\n        return response.data;\n      });\n    }\n  }]);\n\n  return weatherService;\n}();\n\nangular.module('weather').service('weatherService', weatherService);\n\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar WeatherController = function () {\n\n  /** @ngInject */\n  function WeatherController($http, weatherService) {\n    _classCallCheck(this, WeatherController);\n\n    this._$http = $http;\n    this._weatherService = weatherService;\n\n    this.cities = {};\n    this.date = Date.now();\n  }\n\n  /**\n   * Adds city to the map of requested cities.\n   * @param city\n   */\n\n\n  _createClass(WeatherController, [{\n    key: \"addCity\",\n    value: function addCity(city) {\n      var _this = this;\n\n      // If we already have the city in our map, nothing needs to be done.\n      if (this.cities[city.text]) {\n        return;\n      }\n      this._getWeather(city).then(function (data) {\n        _this.cities[city.text] = data;\n      });\n    }\n\n    /**\n     * Gets weather from service for a given city.\n     * @param city\n     * @returns {HttpPromise}\n     */\n\n  }, {\n    key: \"_getWeather\",\n    value: function _getWeather(city) {\n      return this._weatherService.getWeather(city.text);\n    }\n\n    /**\n     * Removes city from the map of requested cities.\n     * @param city\n     */\n\n  }, {\n    key: \"removeCity\",\n    value: function removeCity(city) {\n      // If city is not in our map, nothing needs to be done.\n      if (!this.cities[city.text]) {\n        return;\n      }\n      delete this.cities[city.text];\n    }\n  }]);\n\n  return WeatherController;\n}();\n'use strict';\n\nangular.module('weather').component('weather', {\n  controller: WeatherController,\n  templateUrl: 'app/weather/weather.component.html'\n});\n'use strict';\n\nangular.module('app', ['angularMoment', 'ngAnimate', 'ngTagsInput', 'ui.router', 'weather']);\nangular.module('app').run(['$templateCache', function($templateCache) {$templateCache.put('app/weather/weather.component.html','<div class=\"topbar\">\\n  <div class=\"container\">\\n    <tags-input class=\"tags-input\" ng-model=\"$ctrl.query\" on-tag-added=\"$ctrl.addCity($tag)\" on-tag-removed=\"$ctrl.removeCity($tag)\" placeholder=\"Enter a city\" replace-spaces-with-dashes=\"false\">\\n    </tags-input>\\n  </div>\\n</div>\\n\\n<div class=\"weather-cities-list container-flex\">\\n  <div class=\"weather-box col-md-third\" ng-repeat=\"city in $ctrl.cities track by city.id\">\\n    <div class=\"weather-box-city\">\\n      {{city.name}}<br>\\n      <small class=\"text-muted\">{{$ctrl.date | amDateFormat:\\'MMMM Do\\'}}</small>\\n    </div>\\n    <div class=\"weather-box-temp\">\\n      <strong class=\"weather-box-temp-number lead\">\\n        {{city.main.temp | number:0}}\\n        <sup class=\"weather-box-temp-degree-symbol\">&deg;C</sup>\\n      </strong>\\n      <br>\\n      <small class=\"weather-box-temp-description text-muted\">{{city.weather[0].description}}</small>\\n    </div>\\n    <div class=\"weather-box-misc\">\\n      <small>Humidity:&nbsp;{{city.main.humidity}}%</small>\\n      <small>Wind:&nbsp;{{city.wind.speed}}km/h</small>\\n    </div>\\n  </div>\\n</div>\\n');}]);\n'use strict';\n\nangular.module('app').config(routesConfig);\n\n/** @ngInject */\nfunction routesConfig($stateProvider, $urlRouterProvider, $locationProvider) {\n  //$locationProvider.html5Mode(true).hashPrefix('!');\n  $urlRouterProvider.otherwise('/weather');\n\n  $stateProvider.state('app', {\n    url: '/weather',\n    component: 'weather'\n  });\n}"],"sourceRoot":"/source/"}